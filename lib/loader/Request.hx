package loader;

/**
 * Параметры запроса.  
 * Этот класс описывает общие сведения для выполнения URL запроса.
 * Он содержит: url, метод, заголовки и отправляемые данные.
 * Экземпляры этого класса передаются в метод загрузчика: `ILoader.load()`
 * для фактического выполнения запроса.
 */
class Request
{
    /**
     * Создать объект запроса.
     * @param url Абсолютный URL адрес для отправки запроса. Вы можете указать `url` позже.
     */
    public function new(url:String = null) {
        this.url = url;
    }

    /**
     * URL-адрес, к которому будет выполнен запрос.  
     * Следует указывать абсолютный адрес, поддержка относительного зависит от реализации.  
     * По умолчанию: `null`
     */
    public var url:String;

    /**
     * Используемый [HTTP метод](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods "HTTP request methods")
     * для выполнения запроса.  
     * По умолчанию: `Method.GET`.
     */
    public var method:Method = Method.GET;

    /**
     * Список отправляемых [HTTP заголовков](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers "HTTP headers")   
     * Некоторые типы заголовков могут не поддерживаться из-за ограничений
     * среды выполнения. (Например большинство заголовков в браузере) Также
     * вы не должны использовать заголовки: `Content-Type` и `Content-Length`,
     * вместо этого используйте свойство: `contentType`. (Эти заголовки будут
     * добавлены автоматически)
     * 
     * Все заголовки приводятся к нижнему регистру при отправке.
     * 
     * По умолчанию: `null`
     */
    public var headers:Array<Header> = null;

    /**
     * Данные, которые должны быть переданы вместе с запросом.  
     * Это свойство используется совместно со свойствами: `method` и `contentType`.
     * - Когда `method` имеет значение `GET`, значение `data` добавляется к
     *   значению `url` с использованием синтаксиса строки запроса HTTP.
     * - Когда `method` имеет значение `POST` (или любое другое, кроме `GET`),
     *   значение `data` передаётся в теле запроса HTTP.
     * 
     * Для большей информации смотрите описание свойства: `contentType`.
     * 
     * По умолчанию: `null` (Пустой запрос)
     */
    public var data:Dynamic = null;

    /**
     * Указывает время ожидания (в миллисекундах) для этого запроса. (mc)  
     * По умолчанию: `30000`. (30 sec.)
     */
    public var timeout:Int = 30000;

    /**
     * Задает, следует выполнять перенаправления (`true`) или нет (`false`).  
     * По умолчанию: `true`
     */
    public var followRedirects:Bool = true;

    /**
     * [MIME-Тип](https://developer.mozilla.org/ru/docs/Web/HTTP/Basics_of_HTTP/MIME_types "MIME types")
     * содержимого в поле `data`  
     * При отправке запроса POST значения свойств `contentType` и `data` должны
     * быть надлежащим образом согласованы. Значение свойства `contentType`
     * указывает серверам, как интерпретировать значение в поле `data`.
     * 
     * По умолчанию используется: `application/x-www-form-urlencoded`
     * 1. Если в `data` передан JavaScript **объект**, он упаковывается при
     *    помощи: `XWWWForm.write()`.
     * 2. Если в `data` переданы **двоичные данные**, байты кодируются в URI
     *    формат при помощи: `XWWWForm.encode()`.
     * 3. Если в `data` передана **строка**, она используется *"как есть"*
     *    без изменений. Таким образом вы можете передать уже готовое тело
     *    сообщения: `"a=1&b=2"`.
     * 4. Любой другой тип в `data` сперва приводится к строке и затем
     *    кодируется: `XWWWForm.encode()`. (Кроме `null`)
     * 
     * Для использования `multipart/form-data` типа сообщения, вы можете
     * использовать вспомогательный класс: `MultipartForm`. Он поможет вам
     * сформировать правильное тело сообщения и заголовок `contentType`.
     * Смотрите описание этого класса.
     * 
     * Для любых других типов данных, на вход в `data` ожидается **строка**
     * или **двоичные данные**, все остальные типы данных автоматически
     * приводятся к строке и будут использованы *"как есть"*.
     * 
     * По умолчанию: `application/x-www-form-urlencoded`.
     */
    public var contentType:String = "application/x-www-form-urlencoded";

    /**
     * Получить строковое представление запроса.
     * @return Возвращает строковое представление объекта.
     */
    @:keep
    public function toString():String {
        return "[Request " + method + " " + url + "]";
    }
}