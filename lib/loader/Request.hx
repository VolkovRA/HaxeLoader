package loader;

/**
 * Класс **Request** фиксирует все сведения в одном запросе HTTP.
 * 
 * Объекты **Request** передаются методам `load()` классов **ILoader**.
 * В этом объекте вы можете добавить отправляемые данные, указать заголовки
 * и т.п.
 */
class Request
{
    /**
     * Создать объект запроса.
     * @param url Абсолютный URL адрес для отправки запроса. Вы можете указать `url` позже.
     */
    public function new(url:String = null) {
        this.url                = url;
        this.method             = Method.GET;
        this.headers            = null;
        this.data               = null;
        this.followRedirects    = true;
        this.timeout            = 30000;
    }

    /**
     * URL-адрес, к которому будет выполнен запрос.
     * 
     * Следует указывать абсолютный адрес, поддержка относительного зависит от реализации.
     * Перед отправкой, URL адрес будет автоматически обработан вызовом `encodeURI()`, для
     * экранирования небезопасных сиволов.
     * 
     * @see Encode URI: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI
     */
    public var url:String;

    /**
     * Управляет методом отправки форм НТТР.
     * 
     * По умолчанию: `Method.GET`.
     */
    public var method:Method;

    /**
     * Массив заголовков запроса HTTP, который должен быть добавлен к запросу HTTP.
     * 
     * Массив состоит из объектов **RequestHeader**. Каждый объект в массиве должен быть
     * объектом **RequestHeader**, содержащим строку имени и строку значения.
     * 
     * По умолчанию: `null`
     */
    public var headers:Array<Header>;

    /**
     * Данные, которые должны быть переданы с запросом URL-адреса.
     * 
     * Данное свойство используется вместе со свойством `method`.
     * - Когда `method` имеет значение `GET`, значение `data` добавляется к значению `Request.url`
     *   с использованием синтаксиса строки запроса HTTP.
     * - Когда `method` имеет значение `POST` (или любое другое, кроме `GET`), значение `data`
     *   передается в теле запроса HTTP.
     * 
     * API-интерфейс поддерживает только `String`. Другие типы данных (Двоичные) могут выборочно
     * поддерживаться на различных реализациях интерфейса, в зависимости от платформы.
     * 
     * По умолчанию: `null`
     */
    public var data:Dynamic;

    /**
     * Указывает время ожидания (в миллисекундах) для этого запроса. (mc)
     * 
     * По умолчанию: `30000`. (30 sec.)
     */
    public var timeout:Int;

    /**
     * Задает, следует выполнять перенаправления (`true`) или нет (`false`).
     * 
     * По умолчанию: `true`
     */
    public var followRedirects:Bool;

    /**
     * Получить строковое представление запроса.
     * @return Возвращает строковое представление объекта.
     */
    @:keep
    public function toString():String {
        return "[Request method=" + method + " url=" + url + "]";
    }
}