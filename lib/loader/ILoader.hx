package loader;

import js.lib.Error;

/**
 * Интерфейс **ILoader** загружает данные с URL-адреса в виде текста или двоичных данных.
 * 
 * Данная функция целесообразна при загрузке текстовых файлов, XML-объектов или других
 * сведений, которые будут использованы в динамическом приложении по обработке данных.
 * Объект **ILoader** загружает все данные с URL-адреса, прежде чем сделать их доступными
 * для кода в приложениях. Он отправляет оповещения о состоянии загрузки, которые можно
 * отслеживать с помощью свойств: `bytesLoaded` и `bytesTotal`.
 * 
 * Этот интерфейс реализуют следующие классы:
 * 1. `LoaderNodeJS` - Используется для **серверного приложения** на NodeJS.
 * 2. `LoaderXHR` - Используется в **браузере** для AJAX запросов с использованием `XmlHttpRequest`.
 * 3. `LoaderJSONP` - Используется в **браузере** для кроссдоменных запросов, в которых не работает `XmlHttpRequest`.
 */
interface ILoader
{
    ////////////////
    //   МЕТОДЫ   //
    ////////////////

    /**
     * Отправить и/или загрузить данные с заданного URL-адреса.
     * 
     * Данные могут быть получены как текст или необработанные двоичные данные.
     * Это зависит от значения, установленного для свойства `dataFormat`.
     * Обратите внимание на то, что значением свойства `dataFormat` по умолчанию
     * является текст. Для отправки данных на указанный URL-адрес можно установить
     * в объекте **Request** свойство `data`.
     * 
     * Перед вызовом добавьте все необходимые колбеки, так как они могут быть
     * вызваны мгновенно.
     * 
     * @param request Параметры запроса.
     */
    public function load(request:Request):Void;

    /**
     * Инициация фактического выполнения запроса.
     * 
     * Этот метод используется для возможности отложенного вызова выполнения загрузки.
     * Он должен содержать реализацию фактической отправки тела запроса.
     */
    @:allow(loader.Balancer)
    private function loadStart():Void;

    /**
     * Закрыть операцию загрузки.
     * - Приводит объект в состояние: `LoaderState.COMPLETE`.
     * - Если загрузчик стоит в очереди на отправку, он удаляется из неё.
     * - Любая операция загрузки немедленно прекращается.
     * - Параметры настроек сохраняются: `balancer`, `priority`, `dataFormat` и колбеки.
     * - Колбеки не вызываются.
     */
    public function close():Void;

    /**
     * Очистить загрузчик.
     * - Приводит объект в его изначальное состояние: `LoaderState.READY`.
     * - Если загрузчик стоит в очереди на отправку, он удаляется из неё.
     * - Любая операция загрузки немедленно прекращается.
     * - Все загруженные данные удаляются.
     * - Все параметры настроек сбрасываются.
     * - Колбеки не вызываются.
     */
    public function purge():Void;

    /**
     * Получить список заголовков ответа сервера.
     * 
     * Возвращает список заголовков ответа или `null`, если их нет.
     * 
     * @return Список заголовков ответа сервера.
     */
    public function getHeaders():Array<Header>;

    /**
     * Получить строковое представление загрузчика.
     * @return Строковое представление загрузчика.
     */
    @:keep
    public function toString():String;



    //////////////////
    //   СВОЙСТВА   //
    //////////////////

    /**
     * Состояние загрузчика.
     * 
     * По умолчанию: `LoaderState.READY`
     */
    public var state(default, null):LoaderState;

    /**
     * Балансировщик.
     * 
     * Используется для ограничения отправляемых запросов.
     * Для большей информации смотрите класс: `Balancer`.
     * 
     * Если в момент переключения балансировщика загрузчик
     * стоит в очереди, его запрос отменяется без вызовов
     * колбеков.
     * 
     * По умолчанию: `null`
     */
    public var balancer(default, set):Balancer;

    /**
     * Приоритет выполнения запроса.
     * 
     * Используется совместно со свойством `balancer`, для
     * управления приоритетом запросов в очереди на отправку.
     * 
     * Запросы с самым высоким приоритетом отрабатывают первыми.
     * 
     * По умолчанию: `0`
     */
    public var priority:Int;

    /**
     * Объём загруженных данных. (Байт)
     * 
     * По умолчанию: `0`
     */
    public var bytesLoaded(default, null):Int;

    /**
     * Общий объём загружаемых данных. (Байт)
     * 
     * Во время операции загрузки данное свойство имеет значение `0` и заполняется по завершении операции.
     * Вдобавок, отсутствие заголовка `Content-Length` не позволит определить параметр `bytesTotal`.
     * 
     * По умолчанию: `0`
     */
    public var bytesTotal(default, null):Int;

    /**
     * Данные, полученные при загрузке.
     * 
     * Это свойство заполняется только после полного завершения
     * операции загрузки.
     * 
     * По умолчанию: `null`
     */
    public var data(default, null):Dynamic;

    /**
     * Код статуса ответа сервера.
     * 
     * По умолчанию: `0`
     */
    public var status(default, null):Int;

    /**
     * Определяет, в каком виде получаются загружаемые данные:
     * - `DataFormat.TEXT` - Данные интерпретируются как строка. (По умолчанию)
     * - `DataFormat.JSON` - Данные интерпретируются как строка и преобразуются в объект: `JSON.parse()`.
     * - `DataFormat.BINARY` - Двоичные данные, никак не обрабатываются.
     * 
     * По умолчанию: `DataFormat.TEXT`
     */
    public var dataFormat:DataFormat;

    /**
     * Объект ошибки.
     * 
     * Содержит описание ошибки если запрос не удался.
     * Проверьте это свойство перед доступом к свойству: `data`.
     * 
     * По умолчанию: `null`
     */
    public var error:Error;

    /**
     * Произвольные, пользовательские данные.
     * 
     * Полезно для хранения собственных данных в самом
     * экземпляре загрузчика между запросами. Абсолютно
     * никак не влияет на работу загрузчика и **не сбрасывается**
     * при вызове метода: `purge()`.
     * 
     * По умолчанию: `null` 
     */
    public var userData:Dynamic;



    /////////////////
    //   КОЛБЕКИ   //
    /////////////////
    
    /**
     * Запрос завершён.
     * 
     * Отправляется после декодирования всех полученных данных и размещения их в свойстве `data`
     * объекта **ILoader**, либо при наступлений неустранимой ошибки.
     * 
     * По умолчанию: `null`
     */
    public var onComplete:ILoader->Void;

    /**
     * Получен ответ от сервера.
     * 
     * Это событие предшествует событию `onComplete`. Можно читать статус ответа сервера и
     * получить его заголовки.
     * 
     * По умолчанию: `null`
     */
    public var onResponse:ILoader->Void;

    /**
     * Отправляется в случае получения данных в ходе операции загрузки.
     * 
     * Это событие предшествует событию `onComplete` и может быть вовсе не вызвано. (Маленький запрос)
     * 
     * По умолчанию: `null`
     */
    public var onProgress:ILoader->Void;
}